Comments in StoreData.py about Brainflow Version's function probs. 

Update:
  Now boasting directions:
    Forward
    Backward
    Right 
    Left
    Other

Comments for Backpropagation.py module:

Update:
  Added function that can create a neural network to be trained
    - As of right now it takes in user specified integers to represent the number
      of inputs and neurons per layer
    - Example Input:
      > Input Count: 2
      > Hidden Neuron Count: 2
      > Output Neuron Count: 2
    - Example Output:
      > [{'weights': [0.13436424411240122, 0.8474337369372327, 0.763774618976614]}, {'weights': [0.2550690257394217, 0.49543508709194095, 0.4494910647887381]}]
      > [{'weights': [0.651592972722763, 0.7887233511355132, 0.0938595867742349]}, {'weights': [0.02834747652200631, 0.8357651039198697, 0.43276706790505337]}]
    - Interpretation (at least how I understand it)
      > It takes in an n number of integers and each hidden layer neuron will have weights for each of the inputs and 1 bias.
      > Similarly, each hidden layer output neuron will have weights for each hidden layer neuron and 1 bias
    - Bias
      > Acts like the y-intercept in a standard line equation 
      > It's mainly used for a later-to-be-implemented activation function which can help us force a certain output (I think)
      > Here is a link that I looked at for its definition (as well as for weights):
        https://towardsdatascience.com/whats-the-role-of-weights-and-bias-in-a-neural-network-4cf7e9888a0f